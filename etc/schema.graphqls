type Mutation {
    createMollieTransaction(input: MollieTransactionInput): MollieTransactionOutput @resolver(class: "\\Mollie\\Payment\\GraphQL\\Resolver\\Checkout\\CreateMollieTransaction") @deprecated(reason: "Using the Order.mollie_redirect_url attribuut")
    mollieRestoreCart(input: MollieResetCartInput): MollieResetCartOutput @resolver(class: "Mollie\\Payment\\GraphQL\\Resolver\\Cart\\ResetCart")
    mollieProcessTransaction(input: MollieProcessTransactionInput): MollieProcessTransactionOutput @resolver(class: "Mollie\\Payment\\GraphQL\\Resolver\\Checkout\\ProcessTransaction")
}

type Order {
    mollie_redirect_url: String @resolver(class: "\\Mollie\\Payment\\GraphQL\\Resolver\\Checkout\\PlaceOrderAndReturnRedirectUrl")
    mollie_payment_token: String @resolver(class: "\\Mollie\\Payment\\GraphQL\\Resolver\\Checkout\\PaymentToken")
}

type Cart {
    mollie_available_issuers: [MollieIssuer!] @resolver(class: "Mollie\\Payment\\GraphQL\\Resolver\\Cart\\AvailableIssuersForCart") @doc(description: "Available issuers for the selected payment method")
}

type AvailablePaymentMethod {
    mollie_available_issuers: [MollieIssuer!] @resolver(class: "Mollie\\Payment\\GraphQL\\Resolver\\Cart\\AvailableIssuersForMethod") @doc(description: "Available issuers for this payment method")
    mollie_meta: MolliePaymentMethodMeta! @resolver(class: "Mollie\\Payment\\GraphQL\\Resolver\\Cart\\PaymentMethodMeta") @doc(description: "Retrieve meta information for this payment method (image)")
}

type SelectedPaymentMethod {
    mollie_meta: MolliePaymentMethodMeta! @resolver(class: "Mollie\\Payment\\GraphQL\\Resolver\\Cart\\PaymentMethodMeta") @doc(description: "Retrieve meta information for this payment method (image)")
}

type MollieIssuer {
    name: String
    code: String
    image: String
    svg: String
}

type MolliePaymentMethodMeta {
    image: String
}

type MolliePaymentMethod {
    code: String
    name: String
    image: String
}

type Query {
    mollieCustomerOrder (
        hash: String @doc(description: "The hash added to your custom URL")
    ): CustomerOrder @resolver(class: "Mollie\\Payment\\GraphQL\\Resolver\\Checkout\\MollieCustomerOrder")
    molliePaymentMethods(input: MolliePaymentMethodsInput): MolliePaymentMethodsOutput @resolver(class: "Mollie\\Payment\\GraphQL\\Resolver\\General\\MolliePaymentMethods")
}

type MollieResetCartOutput {
    cart: Cart!
}

type MolliePaymentMethodsOutput {
    methods: [MolliePaymentMethod]
}

type MollieTransactionOutput {
    checkout_url: String
}

type MollieProcessTransactionOutput {
    paymentStatus: PaymentStatusEnum
    cart: Cart @doc(description: "The cart is only available when the payment status is failed, canceled or expired.")
}

input PaymentMethodInput {
    mollie_selected_issuer: String @doc(description: "Provided the issuer chosen by the end-user")
    mollie_card_token: String @doc(description: "The card token provided by Mollie Components")
}

input MollieTransactionInput {
    payment_token: String!
    issuer: String
}

input MolliePaymentMethodsInput {
    amount: Float! = 10
    currency: String! = EUR
}

input MollieResetCartInput {
    cart_id: String! @doc(description: "The unique ID that identifies the customer's cart")
}

input MollieProcessTransactionInput {
    payment_token: String! @doc(description: "The payment token returned from the PlaceOrder call/added to the return URL")
}

input PlaceOrderInput {
    mollie_return_url: String @doc(description: "Optionally send a URL where the visitor is returned after completing the Mollie order")
}

enum PaymentStatusEnum {
    CREATED
    PAID
    AUTHORIZED
    CANCELED
    SHIPPING
    COMPLETED
    EXPIRED
    PENDING
    REFUNDED
    ERROR
    FAILED
    OPEN
}
